      SUBROUTINE FOUR2(DATA,NN,NDIM,ISIGN)
C     THE COOLEY-TUKEY FAST FOURIER TRANSFORM IN USASI BASIC FORTRAN
C
C     TRANSFORM(J1,J2,...) = SUM(DATA(I1,I2,...)*W1**((I2+1)+(J1-1))
C                                 *W2**((I2+1)+(J2-1))*...),
C     WHERE I1 AND J1 RUN FROM 1 TO NN(1) AND W1=EXP(ISIGN*2*PI*
C     SQRT(-1)/NN(1)), ETC.
C
C     DATA IS A MULTIDIMENSIONAL FLOATING POINT ARRAY ALL OF WHOSE
C     DIMENSIONS ARE POWERS OF TWO. THE LENGTH OF EACH DIMENSION IS
C     STORED IN THE INTEGER ARRAY NN, OF LENGTH NDIM, ISIGN IS
C     +1 OR -1, GIVING THE SIGN OF THE TRANSFORM. THE REAL
C     AND IMAGINARY PARTS Of A DATUM ARE IMMEDIATELY ADJACENT IN STORAGE
C     (SUCH AS FORTRAN IV PLACES THEM), TRANSFORM RESULTS ARE RETURNED
C     IN ARRAY DATA, REPLACING THE ORIGINAL DATA. TIME IS PROPORTIONAL
C     TO N*LOG2(N), RATHER TAHN THE USUSAL N**2, NOTE THAT IF A FORWARD
C     TRANSFORM IS FOLLOWED BY AN INVERSE TRANSFORM, THE ORIGINAL DATA
C     WILL REAPPEAR MULTIPLIED BY NN(1)*NN(2)*..., EXAMPLE--
C     FORWARD FOURIER TRANSFORM OF A TWO-DIMENSIONAL ARRAY IN FORTRAN II
C     DIMENSION DATA(2,75,32),NN(2)
C     NN(1)=64
C     NN(2)=32
C     DO 1 I=1,64
C     DO 1 J=1,32
C     DATA(1,I,J)=REAL PART
C  1  DATA(2,I,J)=IMAGINARY PART
C     CALL FOUR2(DATA,NN,2,-1)
C
C     SAME EXAMPLE IN FORTRAN IV
C     DIMENSION DATA(64,32),NN(2)
C     COMPLEX DATA
C     DATA NN/64,32/
C     DO 1 I=1,64
C     DO 1 J=1,32
C  1  DATA(I,J)=COMPLEX VALUE
C     CALL FOUR2(DATA,NN,2,-1)
C
C     PROGRAM BY NORMAN BRENNER FROM THE BASIC PREOGRAM BY CHARLES
C     RADER, MAY 1967, THE IDEA FOR THE DIGIT REVERSAL WAS SUGGESTED
C     BY RALPH ALTER.
C
C     THIS VERSION OF THE FAST FOURIER TRANSFORM IS THE FASTEST KNOWN
C     TO THE AUTHOR, LOOKING UP SINES AND COSINES IN A TABLE INSTEAD OF
C     COMPUTING THEM WOULD DECREASE RUNNING TIME SEVEN PERCENT.
C     PROGRAMS FOURT AND FOUR1 ARE AVAILABLE FROM THE AUTHOR THAT ALSO
C     PERFORM THE FAST FOURIER TRANSFORM AND ARE WRITTEN IN USASI BASIC
C     FORTRAN, FOURT IS THREE TIMES AS LONG, IS NOT RESTRICTED TO
C     POWERS OF TWO, AND RUNS UP TO FORTY PERCENT FASTER ON REAL DATA,
C     FOUR1 IS ONE FOURTH AS LONG, ONE HALF AS FAST, AND IS RESTRICTED
C     TO ONE DIMENSION AND POWERS OF TWO.
C
C     SEE-- IEEE AUDIO TRANSACTIONS (JUNE 1967), SPECIAL ISSUE ON FFT.

      DIMENSION DATA(1),NN(1)
      IF(NDIM-1)700,1,1
1     NTOT=2 
      DO 2 IDIM=1,NDIM
      IF(NN(IDIM))700,700,2
2     NTOT=NTOT*NN(IDIM)
      RTHLF=.70710 67812
      TWOPI=6.28318 53070
C
C     MAIN LOOP FOR EACH DIMENSION
C
      NP1=2
      DO 600 IDIM=1,NDIM
      N=NN(IDIM)
      NP2=NP1*N
      IF(N-1)700,600,100
C     
C     SHUFFLE DATA BY BIT REVERSAL, SINCE N=2**K, AS THE SHUFFLING
C     CAN BE DONE BY SIMPLE INTERCHANGE, NO WORKING ARRAY IS NEEDED
C
100   NP2HF=NP2/2
      J=1
      DO 160 I2=1,NP2,NP1
      IF(J-I2)110,130,130
110   I1MAX=I2+NP1-2
      DO 120 I1=I2,I1MAX,2
      DO 120 I3=I1,NTOT,NP2
      J3=J+I3-I2
      TEMPR=DATA(I3)
      TEMPI=DATA(I3+1)
      DATA(I3)=DATA(J3)
      DATA(I3+1)=DATA(J3+1)
      DATA(J3)=TEMPR
120   DATA(J3+1)=TEMPI
130   M=NP2HF
140   IF(J-M)160,160,150
150   J=J-M
      M=M/2
      IF(M-NP1)160,140,140
160   J=J+M
C     
C     MAIN LOOP, PERFORM FOURIER TRANSFORM OF LENGTH FOUR, WITH ONE OF
C     LENGTH TWO IF NEEDED. THE TWIDDLE FACTOR W=EXP(ISIGN*2*PI*
C     SQRT(-1)*M/(4*MMAX)), CHECK FOR THE SPECIAL CASE W=ISIGN*SQRT(-1)
C     AND REPEAT FOR W=W*(1+ISIGN*SQRT(-1))/SQRT(2).
C
      NP1TW=NP1+NP1
      IPAR=N
310   IF(IPAR-2)350,330,320
320   IPAR=IPAR/4
      GO TO 310
330   DO 340 I1=1,NP1,2
      DO 340 K1=I1,NTOT,NP1TW
      K2=K1+NP1
      TEMPR=DATA(K2)
      TEMPI=DATA(K2+1)
      DATA(K2)=DATA(K1)-TEMPR
      DATA(K2+1)=DATA(K1+1)-TEMPI
      DATA(K1)=DATA(K1)+TEMPR
340   DATA(K1+1)=DATA(K1+1)+TEMPI
350   MMAX=NP1
360   IF(MMAX-NP2HF)370,600,600
370   LMAX=MAX0(NP1TW,MMAX/2)
      DO 570 L=NP1,LMAX,NP1TW
      M=L
      IF(MMAX-NP1)420,420,380
380   THETA=-TWOPI*FLOAT(M)/FLOAT(4*MMAX)
      IF(ISIGN)400,390,390
390   THETA=-THETA
400   WR=COS(THETA)
      WI=SIN(THETA)
410   W2R=WR*WR-WI*WI
      W2I=2.*WR*WI
      W3R=W2R*WR-W2I*WI
      W3I=W2R*WI+W2I*WR
420   DO 530 I1=1,NP1,2
      KMIN=IPAR*M+I1
      IF(MMAX-MP1)430,430,440
430   KMIN=I1
440   KDIF=IPAR*MMAX
450   KSTEP=4*KDIF
      DO 520 K1=KMIN,NTOT,KSTEP
      K2=K1+KDIF
      K3=K2+KDIF
      K4=K3+KDIF
      IF(MMAX-NP1)460,460,480
460   U1R=DATA(K1)+DATA(K2)
      U1I=DATA(K1+1)+DATA(K2+1)
      U2R=DATA(K3)+DATA(K4)
      U2I=DATA(K3+1)+DATA(K4+1)
      U3R=DATA(K1)-DATA(K2)
      U3I=DATA(K1+1)-DATA(K2+1)
      IF(ISIGN)470,475,475
470   U4R=DATA(K3+1)-DATA(K4+1)
      U4I=DATA(K4)-DATA(K3)
      GO TO 510
475   U4R=DATA(K4+1)-DATA(K3+1)
      U4I=DATA(K3)-DATA(K4)
      GO TO 510
480   T2R=W2R*DATA(K2)-W2I*DATA(K2+1)
      T2I=W2R*DATA(K2+1)+W2I*DATA(K2)
      T3R=WR*DATA(K3)-WI*DATA(K3+1)
      T3I=WR*DATA(K3+1)+WI*DATA(K3)
      T4R=W3R*DATA(K4)-W3I*DATA(K4+1)
      T4I=W3R*DATA(K4+1)+W3I*DATA(K4)
      U1R=DATA(K1)+T2R
      U1I=DATA(K1+1)+T2I
      U2R=T3R+T4R
      U2I=T3I+T4I
      U3R=DATA(K1)-T2R
      U3I=DATA(K1+1)-T2I
      IF(ISIGN)490,500,500
490   U4R=T3I-T4I
      U4I=T4R-T3R
      GO TO 510
500   U4R=T4I-T3I
      U4I=T3R-T4R
510   DATA(K1)=U1R+U2R
      DATA(K1+1)=U1I+U2I
      DATA(K2)=U3R+U4R
      DATA(K2+1)=U3I+U4I
      DATA(K3)=U1R-U2R
      DATA(K3+1)=U1I-U2I
      DATA(K4)=U3R-U4R
520   DATA(K4+1)=U3I-U4I
      KMIN=4*(KMIN-I1)+I1
      KDIF=KSTEP
      IF(KDIF-NP2HF)450,450,530
530   CONTINUE
      M=M+LMAX
      IF(M-MMAX)540,540,570
540   IF(ISIGN)550,560,560
550   TEMPR=WR
      WR=(WR+WI)*RTHLF
      WI=(WI-TEMPR)*RTHLF
      GO TO 410
560   TEMPR=WR
      WR=(WR-WI)*RTHLF
      WI=(TEMPR+WI)*RTHLF
      GO TO 410
570   CONTINUE
      IPAR=3-IPAR
      MMAX=MMAX+MMAX
      GO TO 360
600   NP1=NP2
700   RETURN
      END